# M√≥dulo 01: Caracter√≠sticas

- Single-thread: usa apenas 1 n√∫cleo do processador.
- Baixo consumo computacional como: RAM e CPU
- Escal√°vel
- Trabalha com muitas requisi√ß√µes simult√¢neas
- Modelo de E/S n√£o bloqueante (diversas aplica√ß√µes e requisi√ß√µes de forma simult√¢nea)
- Melhores custos operacionais
- Desvantagem: Em aplica√ß√µes muito grande, pode ser mais lento do que outras tecnologias, visto que faz tudo em uma √∫nica thread.

# M√≥dulo 01: Fundamentos do Node.js

Bem-vindo ao primeiro projeto do curso! O objetivo desta aula √© construir uma aplica√ß√£o Node.js do zero, utilizando o m√≠nimo de depend√™ncias externas poss√≠vel. Focaremos nos m√≥dulos e recursos nativos da plataforma para entender seus fundamentos.

Ao final, teremos um projeto completo com persist√™ncia de dados e testes automatizados, explorando conceitos poderosos como *streaming*.

## Se√ß√µes

1. [Configura√ß√£o do Ambiente e Projeto](https://www.google.com/search?q=%231-configura%C3%A7%C3%A3o-do-ambiente-e-projeto)
2. [O Arquivo `package.json`](https://www.google.com/search?q=%232-o-arquivo-packagejson)
3. [Criando o Servidor HTTP](https://www.google.com/search?q=%233-criando-o-servidor-http)
4. [M√≥dulos no Node.js: CommonJS vs. ES Modules](https://www.google.com/search?q=%234-m%C3%B3dulos-no-nodejs-commonjs-vs-es-modules-esm)
5. [Implementando o Servidor com o M√≥dulo `http`](https://www.google.com/search?q=%235-implementando-o-servidor-com-o-m%C3%B3dulo-http)
6. [Executando e Testando o Servidor](https://www.google.com/search?q=%236-executando-e-testando-o-servidor)

---

### 1. Configura√ß√£o do Ambiente e Projeto

Para come√ßar, precisamos organizar nosso ambiente de desenvolvimento.

- **Criando a Estrutura de Pastas:** √â uma boa pr√°tica ter um diret√≥rio central para seus projetos. A sugest√£o da aula √©:
    1. Navegue at√© a pasta do seu usu√°rio.
    2. Crie um diret√≥rio principal (ex: `www`).
    3. Dentro dele, crie um diret√≥rio para o projeto: `01-fundamentos-node.js`.
- **Iniciando o Projeto Node.js:**
    1. Abra a pasta do projeto no seu editor de c√≥digo (como o VS Code).
    2. Abra o terminal integrado.
    3. Execute o seguinte comando para inicializar o projeto:
        
        `npm init -y`
        
    - **O que esse comando faz?** Ele cria o arquivo `package.json`, que √© o cora√ß√£o de qualquer projeto Node.js.
    - **Flag `y`:** Responde "sim" (yes) para todas as perguntas do `npm`, criando o arquivo de forma n√£o interativa e com valores padr√£o.

### 2. O Arquivo `package.json`

Este arquivo √© o manifesto do seu projeto. Suas principais fun√ß√µes s√£o:

- **Metadados:** Cont√©m informa√ß√µes como nome, vers√£o e descri√ß√£o do projeto.
- **Scripts:** Permite definir comandos para automatizar tarefas (ex: `start`, `test`).
- **Depend√™ncias:** O mais importante para o futuro, ele lista todos os pacotes de terceiros (frameworks, bibliotecas) que seu projeto utiliza, junto com suas vers√µes.

### 3. Criando o Servidor HTTP

- **Estrutura do Arquivo:**
    - Crie uma pasta `src` (source) na raiz do projeto para organizar o c√≥digo-fonte.
    - Dentro de `src`, crie o arquivo principal da aplica√ß√£o: `server.js`.
    
    > Nota: Em Node.js, √© mais comum usar server.js em vez de index.js para o arquivo principal de um servidor, pois √© um nome mais sem√¢ntico para o contexto de back-end.
    > 
- **Entendendo o Ambiente Node.js:**
    - O Node.js executa c√≥digo JavaScript fora do navegador, no lado do servidor.
    - Voc√™ pode executar qualquer c√≥digo JavaScript padr√£o. Por exemplo:JavaScript
        
        `const a = 5;
        const b = 5;
        console.log(a + b); // Imprime 10 no terminal`
        
    - **Importante:** APIs exclusivas do navegador **N√ÉO** est√£o dispon√≠veis no Node.js. Voc√™ n√£o pode usar `window`, `document`, `document.querySelector`, etc.

### 4. M√≥dulos no Node.js: CommonJS vs. ES Modules (ESM)

O Node.js possui um sistema de m√≥dulos para importar e exportar c√≥digo entre arquivos.

- **CommonJS (Padr√£o Antigo):**
    - Utiliza a sintaxe `require()` para importar m√≥dulos.
    - Era o padr√£o do Node.js por muitos anos.
    - Exemplo: `const http = require('http');`
- **ES Modules (Padr√£o Moderno):**
    - Utiliza a sintaxe `import` e `export`.
    - √â o padr√£o oficial do JavaScript moderno.
    - Exemplo: `import http from 'http';`
- **Habilitando ES Modules no Projeto:**
    - Por padr√£o, o Node.js ainda usa CommonJS. Para habilitar o suporte a ES Modules, adicione a seguinte linha ao seu `package.json`:
        
        `{
          "name": "01-fundamentos-node.js",
          "version": "1.0.0",
          "description": "",
          "main": "index.js",
          "type": "module", // <--- Adicione esta linha
          "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1"
          },
          "keywords": [],
          "author": "",
          "license": "ISC"
        }`
        
- **Importando M√≥dulos Nativos:**
    - Com as vers√µes mais recentes do Node.js, √© uma boa pr√°tica usar o prefixo `node:` para importar m√≥dulos internos. Isso deixa expl√≠cito que o m√≥dulo √© nativo da plataforma e n√£o um pacote de terceiros.
        
        `import http from 'node:http'; // Forma recomendada`
        

### 5. Implementando o Servidor com o M√≥dulo `http`

Agora, vamos usar o m√≥dulo `http` nativo para criar nosso primeiro servidor.

- **C√≥digo Completo (`src/server.js`):**
    
    `// Importa o m√≥dulo HTTP nativo do Node.js
    import http from 'node:http';
    
    // Cria uma inst√¢ncia do servidor HTTP
    const server = http.createServer((request, response) => {
      // O 'request' (req) cont√©m dados da requisi√ß√£o (ex: URL, m√©todo, corpo da mensagem).
      // O 'response' (res) √© usado para enviar uma resposta de volta ao cliente.
    
      // Define o cabe√ßalho da resposta para indicar que o conte√∫do √© texto plano
      response.writeHead(200, { 'Content-Type': 'text/plain' });
    
      // Finaliza a resposta, enviando o conte√∫do 'Hello World' para o cliente
      return response.end('Hello World');
    });
    
    // Inicia o servidor e o faz "ouvir" por requisi√ß√µes na porta 3333
    server.listen(3333, () => {
      console.log('üöÄ Server is running on http://localhost:3333');
    });`
    
    > Observa√ß√£o: Na aula, o instrutor menciona res.send(), que √© um m√©todo comum em frameworks como o Express.js. No m√≥dulo http nativo do Node, o m√©todo correto para finalizar e enviar a resposta √© response.end().
    > 
- **An√°lise do C√≥digo:**
    - `http.createServer()`: Cria o servidor. Ele recebe uma fun√ß√£o de *callback* que ser√° executada para **cada** requisi√ß√£o recebida.
    - `request` (ou `req`): Um objeto que cont√©m todas as informa√ß√µes da requisi√ß√£o feita pelo cliente (m√©todo HTTP, URL, cabe√ßalhos, etc.).
    - `response` (ou `res`): Um objeto usado para construir e enviar a resposta de volta ao cliente.
    - `server.listen(3333)`: Inicia o servidor na porta `3333` da sua m√°quina (`localhost`). O processo Node.js ficar√° ativo, aguardando por conex√µes.

### 6. Executando e Testando o Servidor

- **Iniciando o Servidor:**
    - No terminal, execute o seguinte comando a partir da raiz do projeto:Bash
        
        `node src/server.js`
        
    - O terminal exibir√° a mensagem "üöÄ Server is running..." e ficar√° "travado". Isso √© o comportamento esperado, pois o servidor est√° em execu√ß√£o.
- **Testando a Aplica√ß√£o:**
    - **Via Navegador:** Abra seu navegador e acesse a URL `http://localhost:3333`. Voc√™ dever√° ver a mensagem "Hello World" na tela.
    - **Via Linha de Comando:** Voc√™ pode usar ferramentas como `curl` ou `httpie` (mencionado na aula) para fazer requisi√ß√µes HTTP pelo terminal.Bash
        
        `# Usando a ferramenta httpie
        http localhost:3333`
        
    - O resultado no terminal mostrar√° o status da resposta (HTTP/1.1 200 OK), os cabe√ßalhos e o corpo ("Hello World").

---

# Guia: Reiniciando o Servidor Automaticamente (Hot Reload)

Este guia aborda uma melhoria essencial no fluxo de desenvolvimento em Node.js: a reinicializa√ß√£o autom√°tica do servidor ap√≥s altera√ß√µes no c√≥digo. Isso evita o processo manual e repetitivo de parar e iniciar o servidor a cada nova modifica√ß√£o, tornando o desenvolvimento muito mais √°gil.

## Se√ß√µes

1. [O Problema: Rein√≠cio Manual do Servidor](https://www.google.com/search?q=%231-o-problema-rein%C3%ADcio-manual-do-servidor)
2. [A Solu√ß√£o Nativa: O Modo `-watch`](https://www.google.com/search?q=%232-a-solu%C3%A7%C3%A3o-nativa-o-modo---watch)
3. [Automatizando o Processo com `npm scripts`](https://www.google.com/search?q=%233-automatizando-o-processo-com-npm-scripts)

---

### 1. O Problema: Rein√≠cio Manual do Servidor

Por padr√£o, quando iniciamos um servidor com Node.js, ele carrega o c√≥digo do arquivo em mem√≥ria e o executa continuamente.

- **Comando Padr√£o:**Bash
    
    `node src/server.js`
    
- **Comportamento:** Se voc√™ alterar qualquer parte do c√≥digo (por exemplo, mudar o texto de "Hello World" para "Hello Ignite") e salvar o arquivo, a altera√ß√£o **n√£o ser√° refletida** no servidor que j√° est√° em execu√ß√£o.
- **O Fluxo de Trabalho Manual (e ineficiente):**
    1. Voltar ao terminal.
    2. Parar o servidor em execu√ß√£o (com `Ctrl + C`).
    3. Executar o comando `node src/server.js` novamente para iniciar o servidor com o c√≥digo atualizado.

Este ciclo manual √© lento e prejudica a produtividade.

### 2. A Solu√ß√£o Nativa: O Modo `-watch`

Vers√µes mais recentes do Node.js introduziram uma solu√ß√£o nativa para este problema, eliminando a necessidade de bibliotecas externas (como o `nodemon`) para essa finalidade.

A solu√ß√£o √© a flag `--watch`.

- **Como Usar:**
Execute o servidor com o seguinte comando:Bash
    
    `node --watch src/server.js`
    
- **O que ele faz?**
O Node.js passa a "observar" (`watch`) o arquivo `src/server.js` (e suas depend√™ncias). Toda vez que voc√™ salva uma altera√ß√£o nesse arquivo, o Node automaticamente reinicia o servidor para voc√™.

> Nota: Ao executar pela primeira vez, voc√™ pode ver um aviso de que a funcionalidade --watch √© experimental. No entanto, ela √© considerada est√°vel e pode ser usada com seguran√ßa para desenvolvimento.
> 

### 3. Automatizando o Processo com `npm scripts`

O comando `node --watch src/server.js` √© eficaz, mas um pouco longo para digitar repetidamente. Podemos criar um "atalho" (ou alias) para ele usando os `npm scripts` no nosso arquivo `package.json`.

1. **Abra o arquivo `package.json`**.
2. **Encontre a se√ß√£o `"scripts"`**.
3. **Crie um novo script**, por exemplo, `"dev"`, e coloque o comando completo como seu valor.
- **Exemplo de `package.json`:**JSON
    
    `{
      "name": "01-fundamentos-node.js",
      "version": "1.0.0",
      "type": "module",
      "description": "",
      "main": "index.js",
      "scripts": {
        "dev": "node --watch src/server.js"
      },
      "keywords": [],
      "author": "",
      "license": "ISC"
    }`
    
1. **Como Executar o Script:**
Agora, para iniciar o servidor em modo de observa√ß√£o, basta executar um comando muito mais simples e f√°cil de lembrar no terminal:Bash
    
    `npm run dev`